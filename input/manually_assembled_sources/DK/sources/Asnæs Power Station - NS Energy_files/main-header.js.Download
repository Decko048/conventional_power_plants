const burgerMenu = document.querySelector("#burger-menu");
const burgerBar1 = document.querySelector("#burger-bar-1");
const burgerBar3 = document.querySelector("#burger-bar-3");
const burgerBar2 = document.querySelector("#burger-bar-2");
const nav = document.querySelector(".main-nav-container");
const subNavL1 = [...document.querySelectorAll(".sub-nav-level-1")];
const subNavL2 = [...document.querySelectorAll(".sub-nav-level-2")];
const search = document.querySelector("#search");
const searchPopUp = document.querySelector("#search-pop-up-container");
const searchCloseBtn = document.querySelector("#search-close-btn");

// Turn Burger Menu into a cross and slide down navigation
burgerMenu.addEventListener("click", () => {
  const navGridContainerHeight = document.querySelector(".main-nav-container .grid-container").offsetHeight;
    if (nav.offsetHeight === 0) {
        setTimeout(() => nav.style.height = "auto", 500);
        burgerBar1.style.transform = "rotate(45deg)";
        burgerBar3.style.transform = "rotate(-45deg)";
        burgerBar2.style.display = "none";
        nav.style.height = `${navGridContainerHeight}px`;
        return;
    }
    burgerBar1.style.transform = "rotate(0deg)";
    burgerBar3.style.transform = "rotate(-0deg)";
    burgerBar2.style.display = "block";
    nav.style.height = `${navGridContainerHeight}px`;
    subNavL1.forEach(element => element.style.height = "0px");
    subNavL2.forEach(element => element.style.height = "0px");
    [...document.querySelectorAll(".fa-angle-double-down")].forEach(downArrow => downArrow.style.transform = "rotate(0deg)");
    setTimeout(() => nav.style.height = "0px",10);
});

// For displaying level 1 of sub navigation
subNavL1.forEach(element => {
    const height = [...element.children].reduce((acc, curr) => acc + curr.offsetHeight, 0); // Combined height of all of the li elements in sub nav level 1
    const downArrow = element.parentElement.querySelector(".fa-angle-double-down");
    
    if (window.screen.availWidth > 1050) { // Screens larger than tablet      
        element.parentElement.addEventListener("mouseenter", () => { // Parent li element
            element.style.height = `${height}px`; // sub nav level 1
            element.parentElement.style.backgroundColor = "#b9dacd"; // sub nav level 1 parent li element
        });
        element.parentElement.addEventListener("mouseleave", () => {
            element.style.height = "0px"; // sub nav level 1
            element.parentElement.style.backgroundColor = "#e6e6e6"; // sub nav level 1 parent li element
        });
        return;
    }
    // For Mobile & Tablet
    downArrow.addEventListener("click", () => { // Down arrow in Mobile & Tablet
        if (element.offsetHeight === 0) { // Checks if the subnav is being displayed
            subNavL1.forEach(element => element.style.height = "0px");
            subNavL2.forEach(element => element.style.height = "0px");
            [...document.querySelectorAll(".fa-angle-double-down")].forEach(downArrow => downArrow.style.transform = "rotate(0deg)"); 
            if (subNavL1.some(element => element.offsetHeight > 0)) {
              setTimeout(() => {
                element.style.height = `${height}px`; // Sub nav level 1
                downArrow.style.transform = "rotate(180deg)";
              }, 500);
              return;
            } else {
              element.style.height = `${height}px`; // Sub nav level 1
              downArrow.style.transform = "rotate(180deg)";
              return;
            }
        }
        element.style.height = `0px`;
        downArrow.style.transform = "rotate(0deg)";
        subNavL2.forEach(element => element.style.height = "0px");
    });

});
// For displaying level 2 of sub navigation
subNavL2.forEach(element => {
    const height = [...element.children].reduce((acc, curr) => acc + curr.offsetHeight, 0); // Combined height of all of the li elements in sub nav level 2
    const parentHeight = [...element.parentElement.parentElement.children].reduce((acc, curr) => acc + curr.offsetHeight, 0); // Combined height of all of the li elements in sub nav level 1
    const width = element.offsetWidth; // Width of sub nav level 2
    const parentWidth = element.parentElement.parentElement.offsetWidth; // Width of sub nav level 1
    const downArrow = element.parentElement.querySelector(".fa-angle-double-down");    

    if (window.screen.availWidth > 1050) { // Screens larger than tablet
        element.parentElement.addEventListener("mouseenter", () => { // Parent li element
            parentHeight > height ? element.style.height = `${parentHeight}px` : element.style.height = `${height}px`; // Sets height of sub nav 2 to whichever element is larger in height
            height > parentHeight ? element.parentElement.parentElement.style.height = `${height}px` : null; // Changes sub nav 1 height is sub nav 2 is larger
            element.parentElement.parentElement.style.width = `${width + parentWidth - 8}px`; // Increases width of sub nav 1 to fit in sub nav 2
            element.style.left = `${parentWidth}px`; // Moves sub nav 2 to the right of sub nav 1
            element.parentElement.style.backgroundColor = "#b9dacd" // Changes parent li background color
            element.parentElement.querySelector("a").style.width = "min-content"; // Prevents links from spilling over into sub nav 2
        });
        // Resets back to default
        element.parentElement.addEventListener("mouseleave", () => {
            element.style.height = "0px";
            element.parentElement.parentElement.style.height = `${parentHeight}px`;
            element.parentElement.parentElement.style.width = `${parentWidth}px`;
            element.parentElement.style.backgroundColor = "#e6e6e6";
        });
        return;
    }
    // Mobile & Tablet
    downArrow.addEventListener("click", () => {
        if (element.offsetHeight === 0) { // Checks sub nav level 2 is not being displayed 
            parentHeight > height ? element.style.height = `${parentHeight}px` : element.style.height = `${height}px`;
            height > parentHeight ? element.parentElement.parentElement.style.height = `${height + 50}px` : null;
            downArrow.style.transform = "rotate(180deg)";
            return;
        }
        element.style.height = `0px`;
        downArrow.style.transform = "rotate(0deg)"
    });
});

search.addEventListener("click", () => window.screen.availWidth > 1050 ? searchPopUp.style.display = "flex" : null);
searchCloseBtn.addEventListener("click", () => searchPopUp.style.display = "none");









/****************************************************************************** 
*******************************************************************************


The Javascript below is the compiled version of the commented out code above.
If you need to edit this file, change the code above, then recomile it here: https://babeljs.io/
and replace the compiled code below.


*******************************************************************************
*******************************************************************************/